c = BuildmasterConfig = {}

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
c['slaves'] = []
c['slaves'].append(BuildSlave("aristotle-slave", "XXXXXX"))
c['slaves'].append(BuildSlave("cicero-slave", "XXXXXX"))

c['slavePortnum'] = 9989

####### CHANGESOURCES

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'git://github.com/opencog/opencog.git',
        workdir='gitpoller-workdir', 
	branches=['master'], 
	pollinterval=10*60,
	project='opencog_master'
	))
c['change_source'].append(GitPoller(
        'git://github.com/opencog/unity3d-opencog-game.git',
        workdir='gitpoller-workdir-unity3d-opencog-game', 
	branches=['master'], 
	pollinterval=10*60,
	project='unity3d_game'
	))

####### SCHEDULERS

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="opencog_master",
                            change_filter=filter.ChangeFilter(project='opencog_master'),
                            treeStableTimer=5*60,
                            builderNames=["opencog_master","doxygen"]
			    ))
c['schedulers'].append(SingleBranchScheduler(
                            name="unity_3d",
                            change_filter=filter.ChangeFilter(project='unity3d_game'),
                            treeStableTimer=5*60,
                            builderNames=["unity3d_game"]
			    ))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=["opencog_master","doxygen","unity3d_game"]
			    ))

####### BUILDERS

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand, Configure, Compile, Test
from buildbot.process.properties import Property, Interpolate

import os.path

cmake_build_dir = "bin"

opencog_master = BuildFactory()
opencog_master.addStep(Git(
            repourl='git://github.com/opencog/opencog.git', 
            mode='full'
	    ))
#opencog_master.addStep(ShellCommand(
#           description=["copy","test config"],
#           command=["cp", "../../opencog-test.conf.example", "lib/opencog-test.conf"]
#           ))
opencog_master.addStep(ShellCommand(
            command        =["mkdir","-p", cmake_build_dir],want_stdout=False,
            description    ="mkbuilddir"
	    ))
opencog_master.addStep(Configure(
            workdir=os.path.join("build",cmake_build_dir), 
	    command        =["cmake", ".."]
	    ))
opencog_master.addStep(Compile(
            workdir=os.path.join("build",cmake_build_dir),
            command        =["make", "-j8"],
            description    =["making","all"],
            descriptionDone=["make",  "all"]
	    ))
opencog_master.addStep(Compile(
            workdir=os.path.join("build",cmake_build_dir),
            command        =["make", "-j8" , "examples"],
            description    =["making","examples"],
            descriptionDone=["make",  "examples"]
	    ))
opencog_master.addStep(Compile(
            workdir=os.path.join("build",cmake_build_dir),
            command        =["make", "-j8" , "tests"],
            description    =["making","tests"],
            descriptionDone=["make",  "tests"]
	    ))
opencog_master.addStep(Test(
            workdir=os.path.join("build",cmake_build_dir),
            command        =["make", "test"],
            description    =["running","tests"],
            descriptionDone=["run",  "tests"]
	    ))

unity3d_game = BuildFactory()
unity3d_game.addStep(Git(repourl='git://github.com/opencog/unity3d-opencog-game', mode='full', branch='master'))

unity3d_game.addStep(Compile(
            description    =["publishing", "win32", "player"],
            descriptionDone=["publish",    "win32", "player"],
            command        =[r'C:\Unity\Editor\Unity.exe', "-batchMode", "-quit", "-nographics", "-projectPath", Interpolate('%(prop:workdir)s\\build'), "-executeMethod", "OCAutomatedPlayerBuilder.BuildStandaloneWindowsPlayer"]
	    ))
unity3d_game.addStep(Compile(
            description    =["publishing", "linux64", "test", "player"],
            descriptionDone=["publish",    "linux64", "test", "player"],
            command        =[r'C:\Unity\Editor\Unity.exe', "-batchMode", "-quit", "-nographics", "-projectPath", Interpolate('%(prop:workdir)s\\build'), "-executeMethod", "OCAutomatedPlayerBuilder.BuildStandaloneLinux64TestPlayer"]
	    ))
unity3d_game.addStep(ShellCommand(
            description    =["fixing", "permissions" ],
            descriptionDone=["fix",    "permissions" ],
            command        =[r'C:\cygwin\bin\chmod.exe', "-R", "+rx", "Players" ]
	    ))
unity3d_game.addStep(ShellCommand(
            description    =["copying", "players", "to", "theosophus"],
            descriptionDone=["copy",    "players", "to", "theosophus"],
            command        =[r'C:\cygwin\bin\scp.exe', "-r", "Players", "buildbot@158.132.219.224:~"]
	    ))
unity3d_game.addStep(ShellCommand(
            description    =["copying", "players", "to", "aristotle"],
            descriptionDone=["copy",    "players", "to", "aristotle"],
            command        =[r'C:\cygwin\bin\scp.exe', "-r", "Players", "buildbot@158.132.219.213:~"]
	    ))
unity3d_game.addStep(Test(
            description    =["testing", "win32", "player"],
            descriptionDone=["test", "win32", "player"],
            command        =[ Interpolate('%(prop:workdir)s\\build\\Players\\Unity3DGameWorldPlayer_Windows.exe'), "test:internal_XGA", "quit" ]
	    ))

doxygen = BuildFactory()
doxygen.addStep(Git(
            repourl='git://github.com/opencog/opencog.git', 
	    mode='full'
	    ))
doxygen.addStep(Configure(
            command        =["cmake", "."]
	    ))
doxygen.addStep(Compile(
            command        =["make", "doxygen"], 
	    description    =["making","documentation"],
            descriptionDone=["make", "documentation"]
	    ))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(BuilderConfig(name="opencog_master",
      slavenames=["aristotle-slave"],
      factory=opencog_master
      ))
c['builders'].append(BuilderConfig(name="doxygen",
      slavenames=["aristotle-slave"],
      factory=doxygen
      ))
c['builders'].append(BuilderConfig(name="unity3d_game",
      slavenames=["cicero-slave"],
      factory=unity3d_game
      ))

####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    gracefulShutdown = False,
    forceBuild = True,
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

from buildbot.status import words
irc = words.IRC("irc.freenode.org", "opencog-buildbot",
		useColors=True,
                channels=[{"channel":  "opencog"}],
#                         {"password": "XXXXXX" }],
		password="XXXXXX",
		allowForce=True,
                notify_events={
#                 'started': 1,
#                 'finished': 1,
                  'exception': 1,
                  'successToFailure': 1,
                  'failureToSuccess': 1,
                })
c['status'].append(irc)

from buildbot.status import mail
c['status'].append(mail.MailNotifier(
                   fromaddr="buildbot@opencog.org",
                   useTls=True,
                   relayhost="smtp.gmail.com",
                   smtpPort=587,
                   smtpUser="buildbot@opencog.org",
                   smtpPassword="XXXXXX",
                   extraRecipients=["opencog-buildbot@googlegroups.com"],
                   sendToInterestedUsers=True
		   ))


####### PROJECT IDENTITY

c['title'] = "OpenCog"
c['titleURL'] = "http://opencog.org"

c['buildbotURL'] = "http://158.132.219.213:8010/"

####### DB URL

c['db'] = {
    'db_url' : "sqlite:///state.sqlite",
}

